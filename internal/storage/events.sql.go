// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: events.sql

package storage

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  name, title, description,  hidden, closed
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, name, title, description, hidden, closed, created_at, updated_at
`

type CreateEventParams struct {
	Name        string
	Title       string
	Description sql.NullString
	Hidden      int64
	Closed      int64
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.Name,
		arg.Title,
		arg.Description,
		arg.Hidden,
		arg.Closed,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Hidden,
		&i.Closed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createEventDate = `-- name: CreateEventDate :one
INSERT INTO event_dates (event_id, uid, value, cancelled)
SELECT events.id AS event_id, ?, ?, ?
FROM events
WHERE events.name = ?
RETURNING id, uid, event_id, value, cancelled
`

type CreateEventDateParams struct {
	Uid       string
	Value     time.Time
	Cancelled int64
	EventName string
}

func (q *Queries) CreateEventDate(ctx context.Context, arg CreateEventDateParams) (EventDate, error) {
	row := q.db.QueryRowContext(ctx, createEventDate,
		arg.Uid,
		arg.Value,
		arg.Cancelled,
		arg.EventName,
	)
	var i EventDate
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.EventID,
		&i.Value,
		&i.Cancelled,
	)
	return i, err
}

const deleteEventDate = `-- name: DeleteEventDate :exec
DELETE FROM event_dates
WHERE id = ?
`

func (q *Queries) DeleteEventDate(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEventDate, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, name, title, description, hidden, closed, created_at, updated_at
FROM events
WHERE id = ?
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Hidden,
		&i.Closed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventByName = `-- name: GetEventByName :one
SELECT id, name, title, description, hidden, closed, created_at, updated_at
FROM events
WHERE name = ?
`

func (q *Queries) GetEventByName(ctx context.Context, name string) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByName, name)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Hidden,
		&i.Closed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventDate = `-- name: GetEventDate :one
SELECT id, uid, event_id, value, cancelled FROM event_dates
WHERE id = ?
`

func (q *Queries) GetEventDate(ctx context.Context, id int64) (EventDate, error) {
	row := q.db.QueryRowContext(ctx, getEventDate, id)
	var i EventDate
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.EventID,
		&i.Value,
		&i.Cancelled,
	)
	return i, err
}

const getEventDateByUid = `-- name: GetEventDateByUid :one
SELECT id, uid, event_id, value, cancelled FROM event_dates
WHERE uid = ?
`

func (q *Queries) GetEventDateByUid(ctx context.Context, uid string) (EventDate, error) {
	row := q.db.QueryRowContext(ctx, getEventDateByUid, uid)
	var i EventDate
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.EventID,
		&i.Value,
		&i.Cancelled,
	)
	return i, err
}

const listEventDates = `-- name: ListEventDates :many
SELECT id, uid, event_id, value, cancelled
FROM event_dates
WHERE value > CURRENT_TIMESTAMP
ORDER BY value ASC
LIMIT ?
`

func (q *Queries) ListEventDates(ctx context.Context, limit int64) ([]EventDate, error) {
	rows, err := q.db.QueryContext(ctx, listEventDates, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventDate
	for rows.Next() {
		var i EventDate
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.EventID,
			&i.Value,
			&i.Cancelled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventDatesByEventID = `-- name: ListEventDatesByEventID :many
SELECT id, uid, event_id, value, cancelled
FROM event_dates
WHERE event_id = ?
`

func (q *Queries) ListEventDatesByEventID(ctx context.Context, eventID int64) ([]EventDate, error) {
	rows, err := q.db.QueryContext(ctx, listEventDatesByEventID, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventDate
	for rows.Next() {
		var i EventDate
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.EventID,
			&i.Value,
			&i.Cancelled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEvents = `-- name: ListEvents :many
SELECT id, name, title, description, hidden, closed, created_at, updated_at
FROM events
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.Hidden,
			&i.Closed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVisibleEvents = `-- name: ListVisibleEvents :many
SELECT events.id, events.name, events.title, events.description, events.hidden, events.closed, events.created_at, events.updated_at
FROM events
INNER JOIN (
  SELECT DISTINCT event_id
  FROM event_dates
  WHERE value > CURRENT_TIMESTAMP
) event_dates ON events.id = event_dates.event_id
WHERE events.hidden = 0
`

func (q *Queries) ListVisibleEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listVisibleEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.Hidden,
			&i.Closed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET
  title = ?,
  description = ?,
  hidden = ?,
  closed = ?
WHERE name = ?
RETURNING id, name, title, description, hidden, closed, created_at, updated_at
`

type UpdateEventParams struct {
	Title       string
	Description sql.NullString
	Hidden      int64
	Closed      int64
	Name        string
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.Title,
		arg.Description,
		arg.Hidden,
		arg.Closed,
		arg.Name,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Hidden,
		&i.Closed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEventDate = `-- name: UpdateEventDate :one
UPDATE event_dates
SET value = ?,
    cancelled = ?
WHERE uid = ?
RETURNING id, uid, event_id, value, cancelled
`

type UpdateEventDateParams struct {
	Value     time.Time
	Cancelled int64
	Uid       string
}

func (q *Queries) UpdateEventDate(ctx context.Context, arg UpdateEventDateParams) (EventDate, error) {
	row := q.db.QueryRowContext(ctx, updateEventDate, arg.Value, arg.Cancelled, arg.Uid)
	var i EventDate
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.EventID,
		&i.Value,
		&i.Cancelled,
	)
	return i, err
}
