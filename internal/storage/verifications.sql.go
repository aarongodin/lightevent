// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: verifications.sql

package storage

import (
	"context"
)

const createVerification = `-- name: CreateVerification :one
INSERT INTO verifications (
  email, key, challenge
) VALUES (?, ?, ?)
RETURNING id, email, "key", completed, challenge, created_at
`

type CreateVerificationParams struct {
	Email     string
	Key       string
	Challenge string
}

func (q *Queries) CreateVerification(ctx context.Context, arg CreateVerificationParams) (Verification, error) {
	row := q.db.QueryRowContext(ctx, createVerification, arg.Email, arg.Key, arg.Challenge)
	var i Verification
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Key,
		&i.Completed,
		&i.Challenge,
		&i.CreatedAt,
	)
	return i, err
}

const getIncompleteVerification = `-- name: GetIncompleteVerification :one
SELECT id, email, "key", completed, challenge, created_at FROM verifications
WHERE email = ? AND completed = 0
`

func (q *Queries) GetIncompleteVerification(ctx context.Context, email string) (Verification, error) {
	row := q.db.QueryRowContext(ctx, getIncompleteVerification, email)
	var i Verification
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Key,
		&i.Completed,
		&i.Challenge,
		&i.CreatedAt,
	)
	return i, err
}

const getVerificationByKey = `-- name: GetVerificationByKey :one
SELECT id, email, "key", completed, challenge, created_at FROM verifications
WHERE key = ?
`

func (q *Queries) GetVerificationByKey(ctx context.Context, key string) (Verification, error) {
	row := q.db.QueryRowContext(ctx, getVerificationByKey, key)
	var i Verification
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Key,
		&i.Completed,
		&i.Challenge,
		&i.CreatedAt,
	)
	return i, err
}

const setVerificationCompleted = `-- name: SetVerificationCompleted :exec
UPDATE verifications
SET completed = 1
WHERE id = ?
`

func (q *Queries) SetVerificationCompleted(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, setVerificationCompleted, id)
	return err
}
