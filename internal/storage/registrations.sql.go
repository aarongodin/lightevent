// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: registrations.sql

package storage

import (
	"context"
	"database/sql"
)

const createRegistration = `-- name: CreateRegistration :one
INSERT INTO registrations (
  conf_code, kind,
  event_id, event_date_id,
  member_id
) VALUES (?, ?, ?, ?, ?)
RETURNING id, conf_code, kind, event_id, event_date_id, member_id, created_at
`

type CreateRegistrationParams struct {
	ConfCode    string
	Kind        string
	EventID     int64
	EventDateID sql.NullInt64
	MemberID    int64
}

func (q *Queries) CreateRegistration(ctx context.Context, arg CreateRegistrationParams) (Registration, error) {
	row := q.db.QueryRowContext(ctx, createRegistration,
		arg.ConfCode,
		arg.Kind,
		arg.EventID,
		arg.EventDateID,
		arg.MemberID,
	)
	var i Registration
	err := row.Scan(
		&i.ID,
		&i.ConfCode,
		&i.Kind,
		&i.EventID,
		&i.EventDateID,
		&i.MemberID,
		&i.CreatedAt,
	)
	return i, err
}

const getRegistrationByConfCode = `-- name: GetRegistrationByConfCode :one
SELECT id, conf_code, kind, event_id, event_date_id, member_id, created_at FROM registrations
WHERE conf_code = ?
`

func (q *Queries) GetRegistrationByConfCode(ctx context.Context, confCode string) (Registration, error) {
	row := q.db.QueryRowContext(ctx, getRegistrationByConfCode, confCode)
	var i Registration
	err := row.Scan(
		&i.ID,
		&i.ConfCode,
		&i.Kind,
		&i.EventID,
		&i.EventDateID,
		&i.MemberID,
		&i.CreatedAt,
	)
	return i, err
}

const listEventRegistrations = `-- name: ListEventRegistrations :many
SELECT id, conf_code, kind, event_id, event_date_id, member_id, created_at FROM registrations
WHERE event_id = ?
`

func (q *Queries) ListEventRegistrations(ctx context.Context, eventID int64) ([]Registration, error) {
	rows, err := q.db.QueryContext(ctx, listEventRegistrations, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Registration
	for rows.Next() {
		var i Registration
		if err := rows.Scan(
			&i.ID,
			&i.ConfCode,
			&i.Kind,
			&i.EventID,
			&i.EventDateID,
			&i.MemberID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
