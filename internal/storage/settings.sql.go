// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: settings.sql

package storage

import (
	"context"
)

const getSettings = `-- name: GetSettings :one
SELECT id, name, value, created_at, updated_at FROM settings
WHERE name = ?
`

func (q *Queries) GetSettings(ctx context.Context, name string) (Setting, error) {
	row := q.db.QueryRowContext(ctx, getSettings, name)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSettings = `-- name: UpdateSettings :exec
INSERT INTO settings (
  name, value
) VALUES (?, ?)
ON CONFLICT DO UPDATE SET
  value = excluded.value
RETURNING id, name, value, created_at, updated_at
`

type UpdateSettingsParams struct {
	Name  string
	Value []byte
}

func (q *Queries) UpdateSettings(ctx context.Context, arg UpdateSettingsParams) error {
	_, err := q.db.ExecContext(ctx, updateSettings, arg.Name, arg.Value)
	return err
}
