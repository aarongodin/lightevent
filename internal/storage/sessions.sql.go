// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: sessions.sql

package storage

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  key, subject, kind
) VALUES (?, ?, ?)
RETURNING id, "key", subject, kind, created_at
`

type CreateSessionParams struct {
	Key     string
	Subject string
	Kind    string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.Key, arg.Subject, arg.Kind)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Subject,
		&i.Kind,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSessionByIdentity = `-- name: GetSessionByIdentity :one
SELECT id, "key", subject, kind, created_at FROM sessions
WHERE subject = ? AND kind = ?
`

type GetSessionByIdentityParams struct {
	Subject string
	Kind    string
}

func (q *Queries) GetSessionByIdentity(ctx context.Context, arg GetSessionByIdentityParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByIdentity, arg.Subject, arg.Kind)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Subject,
		&i.Kind,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionByKey = `-- name: GetSessionByKey :one
SELECT id, "key", subject, kind, created_at FROM sessions
WHERE key = ?
`

func (q *Queries) GetSessionByKey(ctx context.Context, key string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByKey, key)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Subject,
		&i.Kind,
		&i.CreatedAt,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT id, "key", subject, kind, created_at FROM sessions
WHERE created_at >= ?
`

func (q *Queries) ListSessions(ctx context.Context, createdAt time.Time) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, listSessions, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Subject,
			&i.Kind,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
