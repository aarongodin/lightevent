// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package storage

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  uid, username, password_hash, first_name, last_name, email
) VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, uid, username, password_hash, first_name, last_name, email, created_at, updated_at
`

type CreateUserParams struct {
	Uid          string
	Username     string
	PasswordHash string
	FirstName    sql.NullString
	LastName     sql.NullString
	Email        sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Uid,
		arg.Username,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Username,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUID = `-- name: GetUserByUID :one
SELECT id, uid, username, password_hash, first_name, last_name, email, created_at, updated_at FROM users
WHERE uid = ?
`

func (q *Queries) GetUserByUID(ctx context.Context, uid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUID, uid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Username,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, uid, username, password_hash, first_name, last_name, email, created_at, updated_at FROM users
WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Username,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, uid, username, password_hash, first_name, last_name, email, created_at, updated_at FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Username,
			&i.PasswordHash,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = COALESCE(?2, username),
    password_hash = COALESCE(?3, password_hash),
    first_name = COALESCE(?4, first_name),
    last_name = COALESCE(?5, last_name),
    email = COALESCE(?6, email),
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, uid, username, password_hash, first_name, last_name, email, created_at, updated_at
`

type UpdateUserParams struct {
	Username     sql.NullString
	PasswordHash sql.NullString
	FirstName    sql.NullString
	LastName     sql.NullString
	Email        sql.NullString
	ID           int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Username,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
